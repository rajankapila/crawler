{"version":3,"sources":["crawler/CrawlerForm.js","crawler/CrawlerResultStat.js","crawler/CrawlerResultTable.js","crawler/CrawlerResult.js","crawler/Crawler.js","App.js","serviceWorker.js","index.js"],"names":["CrawlerForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentWillReceiveProps","nextProps","setState","isCrawling","handleSelectChange","e","numberOfPages","target","value","handleSubmit","state","maxPages","react_default","a","createElement","className","_this2","onChange","toConsumableArray","Array","map","x","i","key","type","disabled","onClick","crawling","React","Component","CrawlerResultStat","stat","label","CrawlerResultTable","pages_crawled","page","index","url","code","CrawlerResult","data","stats","page_count","image_count","links_internal_count","links_external_count","average_page_load","toFixed","Math","round","average_word_count","average_title_length","crawler_CrawlerResultStat","crawler_CrawlerResultTable","Crawler","crawlData","fetch","method","body","JSON","stringify","number_of_pages","then","res","json","catch","alert","console","log","renderCrawlResult","crawler_CrawlerResult","crawler_CrawlerForm","App","crawler_Crawler","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cbb50c0a.chunk.js","sourcesContent":["import React from \"react\";\n\nclass CrawlerForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      maxPages: 5,\n      numberOfPages: 1,\n      isCrawling: this.props.isCrawling\n    };\n  }\n\n  componentWillReceiveProps = nextProps => {\n    this.setState({ isCrawling: nextProps.isCrawling });\n  };\n\n  /**\n   *  check if app has sent a crawling request\n   */\n\n  crawling() {\n    if (this.state.isCrawling) {\n      return (\n        <div className=\"crawler__form-is-crawling\">\n          <i className=\"fas fa-spinner fa-pulse\" />\n          <div className=\"crawler__form-is-crawling-text\">Crawling...</div>\n        </div>\n      );\n    }\n  }\n\n  handleSelectChange = e => {\n    this.setState({ numberOfPages: e.target.value });\n  };\n\n  handleSubmit = () => {\n    this.props.handleSubmit(this.state.numberOfPages);\n  };\n\n  render() {\n    return (\n      <div className=\"crawler__form \">\n        <div className=\"crawler__form-inner \">\n          <div className=\"crawler__form-select \">\n            <select\n              className=\"custom-select\"\n              onChange={this.handleSelectChange}\n            >\n              {[...Array(this.state.maxPages)].map((x, i) => (\n                <option key={i} value={i + 1}>\n                  {i + 1} {i + 1 > 1 ? \"pages\" : \"page\"}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div className=\"crawler__form-submit\">\n            <input\n              className=\"btn btn-primary btn-md\"\n              type=\"button\"\n              value=\"crawl\"\n              disabled={this.state.isCrawling ? true : false}\n              onClick={() => {\n                this.handleSubmit();\n              }}\n            />\n          </div>\n        </div>\n        {this.crawling()}\n      </div>\n    );\n  }\n}\n\nexport default CrawlerForm;\n","import React from \"react\";\n\nclass CrawlerResultStat extends React.Component {\n  render() {\n    return (\n      <div className=\"crawler__result-stat\">\n        <div>\n          <label>{this.props.stat.label}:</label>\n        </div>\n        <div className=\"crawler__result-stat-value\">\n          {this.props.stat.value}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CrawlerResultStat;\n","import React from \"react\";\n\nclass CrawlerResultTable extends React.Component {\n  render() {\n    return (\n      <div className=\"crawler__result-table\">\n        <div className=\"crawler__result-table-title\">Pages Crawled</div>\n        <table>\n          <thead>\n            <tr>\n              <th>URL</th>\n              <th>Code</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.props.pages_crawled.map((page, index) => {\n              return (\n                <tr key={index}>\n                  <td className=\"crawler__result-table-url\">{page.url}</td>\n                  <td>{page.code}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default CrawlerResultTable;\n","import React from \"react\";\n\nimport CrawlerResultStat from \"./CrawlerResultStat\";\nimport CrawlerResultTable from \"./CrawlerResultTable\";\n\nclass CrawlerResult extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: this.props.data\n    };\n  }\n\n  componentWillReceiveProps = nextProps => {\n    this.setState({ data: nextProps.data });\n  };\n\n  render() {\n    const stats = [\n      { label: \"Number of Pages\", value: this.state.data.page_count },\n      { label: \"Number of Unique Images\", value: this.state.data.image_count },\n      {\n        label: \"Number of Unique Internal Links\",\n        value: this.state.data.links_internal_count\n      },\n      {\n        label: \"Number of Unique External Links\",\n        value: this.state.data.links_external_count\n      },\n      {\n        label: \"Average Page Load(seconds)\",\n        value: this.state.data.average_page_load.toFixed(3)\n      },\n      {\n        label: \"Average Word Count\",\n        value: Math.round(this.state.data.average_word_count)\n      },\n      {\n        label: \"Average Title Length(chars)\",\n        value: Math.round(this.state.data.average_title_length)\n      }\n    ];\n\n    return (\n      <div className=\"crawler__result\">\n        <div className=\"crawler__result-stats\">\n          {stats.map(stat => {\n            return <CrawlerResultStat stat={stat} />;\n          })}\n        </div>\n        <CrawlerResultTable pages_crawled={this.state.data.pages_crawled} />\n      </div>\n    );\n  }\n}\n\nexport default CrawlerResult;\n","import React from \"react\";\n\nimport CrawlerForm from \"./CrawlerForm\";\nimport CrawlerResult from \"./CrawlerResult\";\n\nclass Crawler extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { data: {}, isCrawling: false, crawlData: null };\n  }\n\n  /**\n   * @numberOfPages {Integer} - number of pages to crawl\n   * handle a crawl submit and retrieve the data\n   */\n  handleSubmit = numberOfPages => {\n    //null the crawl data and set is crawling to true\n    this.setState({ isCrawling: true, crawlData: null });\n\n    //post to crawler and get data\n    fetch(\"/crawler/\", {\n      method: \"post\",\n\n      body: JSON.stringify({ number_of_pages: numberOfPages })\n    })\n      .then(res => res.json())\n      .then(res => {\n        //set the new state\n        this.setState({ isCrawling: false, crawlData: res });\n      })\n      .catch(res => {\n        alert(\"There was error with your request\");\n        console.log(res);\n      });\n  };\n\n  /**\n   * check if we have crawl data to display\n   */\n  renderCrawlResult = () => {\n    if (this.state.crawlData) {\n      return <CrawlerResult data={this.state.crawlData} />;\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"crawler \">\n        <div className=\"card\">\n          <div className=\"crawler__title card-header\">Crawler</div>\n          <CrawlerForm\n            handleSubmit={this.handleSubmit}\n            isCrawling={this.state.isCrawling}\n          />\n          {this.renderCrawlResult()}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Crawler;\n","import React from \"react\";\n\nimport \"./less/main.css\";\n\nimport Crawler from \"./crawler/Crawler\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Crawler />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}